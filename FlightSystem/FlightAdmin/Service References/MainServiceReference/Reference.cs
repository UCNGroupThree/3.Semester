//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlightAdmin.MainServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Administrator", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Administrator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airport", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Airport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongtitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Route[] RoutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeZoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longtitude {
            get {
                return this.LongtitudeField;
            }
            set {
                if ((this.LongtitudeField.Equals(value) != true)) {
                    this.LongtitudeField = value;
                    this.RaisePropertyChanged("Longtitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Route[] Routes {
            get {
                return this.RoutesField;
            }
            set {
                if ((object.ReferenceEquals(this.RoutesField, value) != true)) {
                    this.RoutesField = value;
                    this.RaisePropertyChanged("Routes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZone {
            get {
                return this.TimeZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneField, value) != true)) {
                    this.TimeZoneField = value;
                    this.RaisePropertyChanged("TimeZone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Route", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Route : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Flight[] FlightsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Airport FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Airport ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Flight[] Flights {
            get {
                return this.FlightsField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightsField, value) != true)) {
                    this.FlightsField = value;
                    this.RaisePropertyChanged("Flights");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Airport From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Airport To {
            get {
                return this.ToField;
            }
            set {
                if ((object.ReferenceEquals(this.ToField, value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Plane PlaneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArrivalTime {
            get {
                return this.ArrivalTimeField;
            }
            set {
                if ((this.ArrivalTimeField.Equals(value) != true)) {
                    this.ArrivalTimeField = value;
                    this.RaisePropertyChanged("ArrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DepartureTime {
            get {
                return this.DepartureTimeField;
            }
            set {
                if ((this.DepartureTimeField.Equals(value) != true)) {
                    this.DepartureTimeField = value;
                    this.RaisePropertyChanged("DepartureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Plane Plane {
            get {
                return this.PlaneField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaneField, value) != true)) {
                    this.PlaneField = value;
                    this.RaisePropertyChanged("Plane");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Plane", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Plane : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Seat[] SeatsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Seat[] Seats {
            get {
                return this.SeatsField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatsField, value) != true)) {
                    this.SeatsField = value;
                    this.RaisePropertyChanged("Seats");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seat", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Seat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PosXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PosYField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PosX {
            get {
                return this.PosXField;
            }
            set {
                if ((this.PosXField.Equals(value) != true)) {
                    this.PosXField = value;
                    this.RaisePropertyChanged("PosX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PosY {
            get {
                return this.PosYField;
            }
            set {
                if ((this.PosYField.Equals(value) != true)) {
                    this.PosYField = value;
                    this.RaisePropertyChanged("PosY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
    [System.SerializableAttribute()]
    public partial class NullPointerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseInsertFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
    [System.SerializableAttribute()]
    public partial class DatabaseInsertFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseUpdateFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
    [System.SerializableAttribute()]
    public partial class DatabaseUpdateFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
    [System.SerializableAttribute()]
    public partial class OptimisticConcurrencyFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseDeleteFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
    [System.SerializableAttribute()]
    public partial class DatabaseDeleteFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Postal PostalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Ticket[] TicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Postal Postal {
            get {
                return this.PostalField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalField, value) != true)) {
                    this.PostalField = value;
                    this.RaisePropertyChanged("Postal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Postal", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Postal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PostCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PostCode {
            get {
                return this.PostCodeField;
            }
            set {
                if ((this.PostCodeField.Equals(value) != true)) {
                    this.PostCodeField = value;
                    this.RaisePropertyChanged("PostCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ConcurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.SeatReservation[] SeatReservationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Concurrency {
            get {
                return this.ConcurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcurrencyField, value) != true)) {
                    this.ConcurrencyField = value;
                    this.RaisePropertyChanged("Concurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderState {
            get {
                return this.OrderStateField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderStateField, value) != true)) {
                    this.OrderStateField = value;
                    this.RaisePropertyChanged("OrderState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.SeatReservation[] SeatReservations {
            get {
                return this.SeatReservationsField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatReservationsField, value) != true)) {
                    this.SeatReservationsField = value;
                    this.RaisePropertyChanged("SeatReservations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SeatReservation", Namespace="http://schemas.datacontract.org/2004/07/WCFService.Model", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class SeatReservation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Flight FlightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FlightAdmin.MainServiceReference.Seat SeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Flight Flight {
            get {
                return this.FlightField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightField, value) != true)) {
                    this.FlightField = value;
                    this.RaisePropertyChanged("Flight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FlightAdmin.MainServiceReference.Seat Seat {
            get {
                return this.SeatField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatField, value) != true)) {
                    this.SeatField = value;
                    this.RaisePropertyChanged("Seat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IAdministratorService")]
    public interface IAdministratorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/AddAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/AddAdministratorResponse")]
        int AddAdministrator(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/AddAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/AddAdministratorResponse")]
        System.Threading.Tasks.Task<int> AddAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/UpdateAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/UpdateAdministratorResponse")]
        FlightAdmin.MainServiceReference.Administrator UpdateAdministrator(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/UpdateAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/UpdateAdministratorResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Administrator> UpdateAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/DeleteAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/DeleteAdministratorResponse")]
        void DeleteAdministrator(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/DeleteAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/DeleteAdministratorResponse")]
        System.Threading.Tasks.Task DeleteAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/GetAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/GetAdministratorResponse")]
        FlightAdmin.MainServiceReference.Administrator GetAdministrator(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdministratorService/GetAdministrator", ReplyAction="http://tempuri.org/IAdministratorService/GetAdministratorResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Administrator> GetAdministratorAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdministratorServiceChannel : FlightAdmin.MainServiceReference.IAdministratorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdministratorServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IAdministratorService>, FlightAdmin.MainServiceReference.IAdministratorService {
        
        public AdministratorServiceClient() {
        }
        
        public AdministratorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdministratorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministratorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministratorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddAdministrator(FlightAdmin.MainServiceReference.Administrator administrator) {
            return base.Channel.AddAdministrator(administrator);
        }
        
        public System.Threading.Tasks.Task<int> AddAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator) {
            return base.Channel.AddAdministratorAsync(administrator);
        }
        
        public FlightAdmin.MainServiceReference.Administrator UpdateAdministrator(FlightAdmin.MainServiceReference.Administrator administrator) {
            return base.Channel.UpdateAdministrator(administrator);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Administrator> UpdateAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator) {
            return base.Channel.UpdateAdministratorAsync(administrator);
        }
        
        public void DeleteAdministrator(FlightAdmin.MainServiceReference.Administrator administrator) {
            base.Channel.DeleteAdministrator(administrator);
        }
        
        public System.Threading.Tasks.Task DeleteAdministratorAsync(FlightAdmin.MainServiceReference.Administrator administrator) {
            return base.Channel.DeleteAdministratorAsync(administrator);
        }
        
        public FlightAdmin.MainServiceReference.Administrator GetAdministrator(int id) {
            return base.Channel.GetAdministrator(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Administrator> GetAdministratorAsync(int id) {
            return base.Channel.GetAdministratorAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IAirportService")]
    public interface IAirportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/AddAirport", ReplyAction="http://tempuri.org/IAirportService/AddAirportResponse")]
        int AddAirport(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/AddAirport", ReplyAction="http://tempuri.org/IAirportService/AddAirportResponse")]
        System.Threading.Tasks.Task<int> AddAirportAsync(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/UpdateAirport", ReplyAction="http://tempuri.org/IAirportService/UpdateAirportResponse")]
        FlightAdmin.MainServiceReference.Airport UpdateAirport(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/UpdateAirport", ReplyAction="http://tempuri.org/IAirportService/UpdateAirportResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport> UpdateAirportAsync(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/DeleteAirport", ReplyAction="http://tempuri.org/IAirportService/DeleteAirportResponse")]
        void DeleteAirport(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/DeleteAirport", ReplyAction="http://tempuri.org/IAirportService/DeleteAirportResponse")]
        System.Threading.Tasks.Task DeleteAirportAsync(FlightAdmin.MainServiceReference.Airport airport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirport", ReplyAction="http://tempuri.org/IAirportService/GetAirportResponse")]
        FlightAdmin.MainServiceReference.Airport GetAirport(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirport", ReplyAction="http://tempuri.org/IAirportService/GetAirportResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport> GetAirportAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByCountry", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByCountryResponse")]
        FlightAdmin.MainServiceReference.Airport[] GetAirportsByCountry(string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByCountry", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByCountryResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByCountryAsync(string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByCity", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByCityResponse")]
        FlightAdmin.MainServiceReference.Airport[] GetAirportsByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByCity", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByCityResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByName", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByNameResponse")]
        FlightAdmin.MainServiceReference.Airport[] GetAirportsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportService/GetAirportsByName", ReplyAction="http://tempuri.org/IAirportService/GetAirportsByNameResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirportServiceChannel : FlightAdmin.MainServiceReference.IAirportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirportServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IAirportService>, FlightAdmin.MainServiceReference.IAirportService {
        
        public AirportServiceClient() {
        }
        
        public AirportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddAirport(FlightAdmin.MainServiceReference.Airport airport) {
            return base.Channel.AddAirport(airport);
        }
        
        public System.Threading.Tasks.Task<int> AddAirportAsync(FlightAdmin.MainServiceReference.Airport airport) {
            return base.Channel.AddAirportAsync(airport);
        }
        
        public FlightAdmin.MainServiceReference.Airport UpdateAirport(FlightAdmin.MainServiceReference.Airport airport) {
            return base.Channel.UpdateAirport(airport);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport> UpdateAirportAsync(FlightAdmin.MainServiceReference.Airport airport) {
            return base.Channel.UpdateAirportAsync(airport);
        }
        
        public void DeleteAirport(FlightAdmin.MainServiceReference.Airport airport) {
            base.Channel.DeleteAirport(airport);
        }
        
        public System.Threading.Tasks.Task DeleteAirportAsync(FlightAdmin.MainServiceReference.Airport airport) {
            return base.Channel.DeleteAirportAsync(airport);
        }
        
        public FlightAdmin.MainServiceReference.Airport GetAirport(int id) {
            return base.Channel.GetAirport(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport> GetAirportAsync(int id) {
            return base.Channel.GetAirportAsync(id);
        }
        
        public FlightAdmin.MainServiceReference.Airport[] GetAirportsByCountry(string country) {
            return base.Channel.GetAirportsByCountry(country);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByCountryAsync(string country) {
            return base.Channel.GetAirportsByCountryAsync(country);
        }
        
        public FlightAdmin.MainServiceReference.Airport[] GetAirportsByCity(string city) {
            return base.Channel.GetAirportsByCity(city);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByCityAsync(string city) {
            return base.Channel.GetAirportsByCityAsync(city);
        }
        
        public FlightAdmin.MainServiceReference.Airport[] GetAirportsByName(string name) {
            return base.Channel.GetAirportsByName(name);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Airport[]> GetAirportsByNameAsync(string name) {
            return base.Channel.GetAirportsByNameAsync(name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IFlightService")]
    public interface IFlightService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/AddFlight", ReplyAction="http://tempuri.org/IFlightService/AddFlightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IFlightService/AddFlightNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseInsertFault), Action="http://tempuri.org/IFlightService/AddFlightDatabaseInsertFaultFault", Name="DatabaseInsertFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        int AddFlight(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/AddFlight", ReplyAction="http://tempuri.org/IFlightService/AddFlightResponse")]
        System.Threading.Tasks.Task<int> AddFlightAsync(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateFlight", ReplyAction="http://tempuri.org/IFlightService/UpdateFlightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseUpdateFault), Action="http://tempuri.org/IFlightService/UpdateFlightDatabaseUpdateFaultFault", Name="DatabaseUpdateFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.OptimisticConcurrencyFault), Action="http://tempuri.org/IFlightService/UpdateFlightOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IFlightService/UpdateFlightNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        FlightAdmin.MainServiceReference.Flight UpdateFlight(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/UpdateFlight", ReplyAction="http://tempuri.org/IFlightService/UpdateFlightResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Flight> UpdateFlightAsync(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseDeleteFault), Action="http://tempuri.org/IFlightService/DeleteFlightDatabaseDeleteFaultFault", Name="DatabaseDeleteFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IFlightService/DeleteFlightNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        void DeleteFlight(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/DeleteFlight", ReplyAction="http://tempuri.org/IFlightService/DeleteFlightResponse")]
        System.Threading.Tasks.Task DeleteFlightAsync(FlightAdmin.MainServiceReference.Flight flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlight", ReplyAction="http://tempuri.org/IFlightService/GetFlightResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IFlightService/GetFlightNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        FlightAdmin.MainServiceReference.Flight GetFlight(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetFlight", ReplyAction="http://tempuri.org/IFlightService/GetFlightResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Flight> GetFlightAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightServiceChannel : FlightAdmin.MainServiceReference.IFlightService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IFlightService>, FlightAdmin.MainServiceReference.IFlightService {
        
        public FlightServiceClient() {
        }
        
        public FlightServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddFlight(FlightAdmin.MainServiceReference.Flight flight) {
            return base.Channel.AddFlight(flight);
        }
        
        public System.Threading.Tasks.Task<int> AddFlightAsync(FlightAdmin.MainServiceReference.Flight flight) {
            return base.Channel.AddFlightAsync(flight);
        }
        
        public FlightAdmin.MainServiceReference.Flight UpdateFlight(FlightAdmin.MainServiceReference.Flight flight) {
            return base.Channel.UpdateFlight(flight);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Flight> UpdateFlightAsync(FlightAdmin.MainServiceReference.Flight flight) {
            return base.Channel.UpdateFlightAsync(flight);
        }
        
        public void DeleteFlight(FlightAdmin.MainServiceReference.Flight flight) {
            base.Channel.DeleteFlight(flight);
        }
        
        public System.Threading.Tasks.Task DeleteFlightAsync(FlightAdmin.MainServiceReference.Flight flight) {
            return base.Channel.DeleteFlightAsync(flight);
        }
        
        public FlightAdmin.MainServiceReference.Flight GetFlight(int id) {
            return base.Channel.GetFlight(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Flight> GetFlightAsync(int id) {
            return base.Channel.GetFlightAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IPlaneService")]
    public interface IPlaneService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/AddPlane", ReplyAction="http://tempuri.org/IPlaneService/AddPlaneResponse")]
        int AddPlane(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/AddPlane", ReplyAction="http://tempuri.org/IPlaneService/AddPlaneResponse")]
        System.Threading.Tasks.Task<int> AddPlaneAsync(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/UpdatePlane", ReplyAction="http://tempuri.org/IPlaneService/UpdatePlaneResponse")]
        FlightAdmin.MainServiceReference.Plane UpdatePlane(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/UpdatePlane", ReplyAction="http://tempuri.org/IPlaneService/UpdatePlaneResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Plane> UpdatePlaneAsync(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/DeletePlane", ReplyAction="http://tempuri.org/IPlaneService/DeletePlaneResponse")]
        void DeletePlane(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/DeletePlane", ReplyAction="http://tempuri.org/IPlaneService/DeletePlaneResponse")]
        System.Threading.Tasks.Task DeletePlaneAsync(FlightAdmin.MainServiceReference.Plane plane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/GetPlane", ReplyAction="http://tempuri.org/IPlaneService/GetPlaneResponse")]
        FlightAdmin.MainServiceReference.Plane GetPlane(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlaneService/GetPlane", ReplyAction="http://tempuri.org/IPlaneService/GetPlaneResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Plane> GetPlaneAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlaneServiceChannel : FlightAdmin.MainServiceReference.IPlaneService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaneServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IPlaneService>, FlightAdmin.MainServiceReference.IPlaneService {
        
        public PlaneServiceClient() {
        }
        
        public PlaneServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlaneServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlaneServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlaneServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddPlane(FlightAdmin.MainServiceReference.Plane plane) {
            return base.Channel.AddPlane(plane);
        }
        
        public System.Threading.Tasks.Task<int> AddPlaneAsync(FlightAdmin.MainServiceReference.Plane plane) {
            return base.Channel.AddPlaneAsync(plane);
        }
        
        public FlightAdmin.MainServiceReference.Plane UpdatePlane(FlightAdmin.MainServiceReference.Plane plane) {
            return base.Channel.UpdatePlane(plane);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Plane> UpdatePlaneAsync(FlightAdmin.MainServiceReference.Plane plane) {
            return base.Channel.UpdatePlaneAsync(plane);
        }
        
        public void DeletePlane(FlightAdmin.MainServiceReference.Plane plane) {
            base.Channel.DeletePlane(plane);
        }
        
        public System.Threading.Tasks.Task DeletePlaneAsync(FlightAdmin.MainServiceReference.Plane plane) {
            return base.Channel.DeletePlaneAsync(plane);
        }
        
        public FlightAdmin.MainServiceReference.Plane GetPlane(int id) {
            return base.Channel.GetPlane(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Plane> GetPlaneAsync(int id) {
            return base.Channel.GetPlaneAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IRouteService")]
    public interface IRouteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/AddRoute", ReplyAction="http://tempuri.org/IRouteService/AddRouteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IRouteService/AddRouteNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseInsertFault), Action="http://tempuri.org/IRouteService/AddRouteDatabaseInsertFaultFault", Name="DatabaseInsertFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        FlightAdmin.MainServiceReference.Route AddRoute(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/AddRoute", ReplyAction="http://tempuri.org/IRouteService/AddRouteResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> AddRouteAsync(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/UpdateRoute", ReplyAction="http://tempuri.org/IRouteService/UpdateRouteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IRouteService/UpdateRouteNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseUpdateFault), Action="http://tempuri.org/IRouteService/UpdateRouteDatabaseUpdateFaultFault", Name="DatabaseUpdateFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.OptimisticConcurrencyFault), Action="http://tempuri.org/IRouteService/UpdateRouteOptimisticConcurrencyFaultFault", Name="OptimisticConcurrencyFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        FlightAdmin.MainServiceReference.Route UpdateRoute(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/UpdateRoute", ReplyAction="http://tempuri.org/IRouteService/UpdateRouteResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> UpdateRouteAsync(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/DeleteRoute", ReplyAction="http://tempuri.org/IRouteService/DeleteRouteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IRouteService/DeleteRouteNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.DatabaseDeleteFault), Action="http://tempuri.org/IRouteService/DeleteRouteDatabaseDeleteFaultFault", Name="DatabaseDeleteFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        void DeleteRoute(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/DeleteRoute", ReplyAction="http://tempuri.org/IRouteService/DeleteRouteResponse")]
        System.Threading.Tasks.Task DeleteRouteAsync(FlightAdmin.MainServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/GetRoute", ReplyAction="http://tempuri.org/IRouteService/GetRouteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FlightAdmin.MainServiceReference.NullPointerFault), Action="http://tempuri.org/IRouteService/GetRouteNullPointerFaultFault", Name="NullPointerFault", Namespace="http://schemas.datacontract.org/2004/07/WCFService.WCF.Faults")]
        FlightAdmin.MainServiceReference.Route GetRoute(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/GetRoute", ReplyAction="http://tempuri.org/IRouteService/GetRouteResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> GetRouteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRouteServiceChannel : FlightAdmin.MainServiceReference.IRouteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RouteServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IRouteService>, FlightAdmin.MainServiceReference.IRouteService {
        
        public RouteServiceClient() {
        }
        
        public RouteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RouteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FlightAdmin.MainServiceReference.Route AddRoute(FlightAdmin.MainServiceReference.Route route) {
            return base.Channel.AddRoute(route);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> AddRouteAsync(FlightAdmin.MainServiceReference.Route route) {
            return base.Channel.AddRouteAsync(route);
        }
        
        public FlightAdmin.MainServiceReference.Route UpdateRoute(FlightAdmin.MainServiceReference.Route route) {
            return base.Channel.UpdateRoute(route);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> UpdateRouteAsync(FlightAdmin.MainServiceReference.Route route) {
            return base.Channel.UpdateRouteAsync(route);
        }
        
        public void DeleteRoute(FlightAdmin.MainServiceReference.Route route) {
            base.Channel.DeleteRoute(route);
        }
        
        public System.Threading.Tasks.Task DeleteRouteAsync(FlightAdmin.MainServiceReference.Route route) {
            return base.Channel.DeleteRouteAsync(route);
        }
        
        public FlightAdmin.MainServiceReference.Route GetRoute(int id) {
            return base.Channel.GetRoute(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.Route> GetRouteAsync(int id) {
            return base.Channel.GetRouteAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        int AddUser(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        FlightAdmin.MainServiceReference.User UpdateUser(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.User> UpdateUserAsync(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        void DeleteUser(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(FlightAdmin.MainServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        FlightAdmin.MainServiceReference.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.User> GetUserAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : FlightAdmin.MainServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<FlightAdmin.MainServiceReference.IUserService>, FlightAdmin.MainServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(FlightAdmin.MainServiceReference.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(FlightAdmin.MainServiceReference.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public FlightAdmin.MainServiceReference.User UpdateUser(FlightAdmin.MainServiceReference.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.User> UpdateUserAsync(FlightAdmin.MainServiceReference.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DeleteUser(FlightAdmin.MainServiceReference.User user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(FlightAdmin.MainServiceReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public FlightAdmin.MainServiceReference.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<FlightAdmin.MainServiceReference.User> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
    }
}
